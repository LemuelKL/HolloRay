-sequenceDone
---
seq(__done, _C), _sig -> _C, _sig

-sequence 
_C1, _sig -> _C1P, _sigP
---
seq(_C1, _C2), _sig -> seq(_C1P, _C2), _sigP

-ifTrue 
---
if(True, _C1, _C2),_sig -> _C1, _sig

-ifFalse 
---
if(False, _C1, _C2),_sig -> _C2,_sig

-ifResolve
_E, _sig ->_EP, _sigP
---
if(_E,_C1,_C2),_sig -> if(_EP, _C1, _C2), _sigP

-while
---
while(_E, _C),_sig -> if(_E, seq(_C, while(_E,_C)), __done), _sig

-assignInt
_n |> __int32(_)   
---
assign(_X, _n), _sig -> __done, __put(_sig, _X, _n)

-assignStr
_s |> __string(_)
---
assign(_X, _s), _sig -> __done, __put(_sig, _X, _s)

-assignResolve
_E, _sig -> _I, _sigP 
---
assign(_X,_E), _sig -> assign(_X, _I), _sigP

-gt
_n1 |> __int32(_) _n2 |> __int32(_)
---
gt(_n1, _n2),_sig ->  __gt(_n1, _n2),_sig 

-gtRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
gt(_n, _E2),_sig -> gt(_n, _I2), _sigP

-gtLeft
_E1, _sig -> _I1, _sigP 
---
gt(_E1, _E2),_sig -> gt(_I1, _E2), _sigP

-ne
_n1 |> __int32(_) _n2 |> __int32(_)
---
ne(_n1, _n2),_sig ->  __ne(_n1, _n2),_sig

-neRight
_n |> __int32(_)  _E2, _sig -> _I2,_sigP 
---
ne(_n, _E2),_sig -> ne(_n, _I2), _sigP

-neLeft
_E1, _sig -> _I1, _sigP 
---
ne(_E1, _E2),_sig -> ne(_I1, _E2), _sigP

-sub
_n1 |> __int32(_) _n2 |> __int32(_)
---
sub(_n1, _n2),_sig ->  __sub(_n1, _n2),_sig

-subRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
sub(_n, _E2),_sig -> sub(_n, _I2), _sigP

-subLeft
_E1,_sig -> _I1,_sigP
---
sub(_E1, _E2),_sig -> sub(_I1, _E2), _sigP

-variable
__get(_sig, _R) |> _Z
---
deref(_R),_sig -> _Z, _sig

-cube
_a |> __real64(_)
---
cube(_a),_sig -> __user("cube", _a), _sig

-cylinder
_r |> __real64(_)  _h |> __real64(_)
---
cylinder(_r, _h),_sig -> __user("cylinder", _r, _h),_sig

-sphere
_r |> __real64(_)
---
sphere(_r),_sig -> __user("sphere", _r),_sig

-cone
_r |> __real64(_)  _h |> __real64(_)
---
cone(_r, _h),_sig -> __user("cone", _r, _h),_sig

-torus
_r |> __real64(_)  _R |> __real64(_)
---
torus(_r, _R),_sig -> __user("torus", _r, _R),_sig

-pyramid
_a |> __real64(_) _h |> __real64(_)
---
pyramid(_a, _h),_sig -> __user("pyramid", _a, _h),_sig

-tetrahedron
_a |> __real64(_)
---
tetrahedron(_a),_sig -> __user("tetrahedron", _a),_sig

-union
_E1, _sig -> _I1, _sigP
---
union(_E1, _E2),_sig -> __union(_I1, _E2), _sigP

-intersection
_E1, _sig -> _I1, _sigP
---
intersection(_E1, _E2),_sig -> __intersection(_I1, _E2), _sigP

-difference
_E1, _sig -> _I1, _sigP
---
difference(_E1, _E2),_sig -> __difference(_I1, _E2), _sigP

-initialise
---
init,_sig -> __user("init", __, __),_sig

-paint
---
paint,_sig -> __user("paint", __, __),_sig

-clear
---
clear,_sig -> __user("clear", __, __),_sig

-translate
_x |> __real64(_) _y |> __real64(_) _z |> __real64(_) _E1,_sig -> _V1,_sig
---
translate(_E1, _x, _y, _z),_sig -> __user("translate", _V1, _x, _y, _z),_sig

-rotate
_x |> __real64(_) _y |> __real64(_) _z |> __real64(_) _E1,_sig -> _V1,_sig
---
rotate(_E1, _x, _y, _z),_sig -> __user("rotate", _V1, _x, _y, _z),_sig

!trace 5

(*
!try
seq(init(),
seq(assign(X, cube(50.0)),
seq(translate(deref(X), 100.0, 0.0, 0.0),
paint()
))), __map
*)

!try
seq(init(),
seq(assign(X, cube(50.0)),
seq(translate(deref(X), -100.0, 0.0, 0.0),
paint()
))), __map



