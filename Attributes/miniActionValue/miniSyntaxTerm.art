(*******************************************************************************
*
* miniSyntaxTerm.art - Adrian Johnstone 9 January 2016
*
*******************************************************************************)
statement ::= 'print'^^ '('^ printElements^ ')'^ ';'^   (* print statement *)

printElements ::= STRING_DQ | 
                  STRING_DQ ','^ printElements^ | 
                  e0 | e0  ','^ printElements^^  

e0 ::= e1^^ | 
       e1 gtOp^^  e1 |       (* Greater than *)
       e1 ltOp^^  e1 |       (* Less than *)
       e1 geOp^^ e1 |       (* Greater than or equals*)
       e1 leOp^^ e1 |       (* Less than or equals *)
       e1 eqOp^^ e1 |       (* Equal to *)
       e1 neqOp^^ e1         (* Not equal to *)

e1  ::= e2^^ | 
        e1 addOp^^ e2 |       (* Add *)
        e1 subOp^^ e2         (* Subtract *)

e2  ::= e3^^ | 
        e2 mulOp^^ e3 |       (* Multiply *)
        e2 divOp^^ e3 |       (* Divide *)
        e2 modOp^^ e3         (* Mod *)

e3  ::= e4^^ | 
        posOp^^ e3 |          (* Posite *)
        negOp^^ e3            (* Negate *)

e4  ::= e5^^ | 
        e5 expOp^^ e4        (* exponentiate *)

e5  ::= INTEGER^^ |         (* Integer literal *)
        '('^ e1^^ ')'^      (* Parenthesised expression *)
       
gtOp ::= '>'^
geOp ::= '>='^
ltOp ::= '<'^
leOp ::= '<='^
eqOp ::= '=='^
neqOp ::= '!='^


addOp ::= '+'^
subOp ::= '-'^

mulOp ::= '*'^
divOp ::= '.'^
modOp ::= '%'^

negOp ::= '-'
posOp ::= '+'

expOp ::= '**'

STRING_DQ ::= &STRING_DQ  

INTEGER ::= &INTEGER  

