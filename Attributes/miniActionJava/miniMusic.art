(*******************************************************************************
*
* miniMusic.art - Adrian Johnstone 18 Februrary 2017
*
* To do: play scales
*        implement [] chord notation
*
*******************************************************************************)
prelude { import java.util.HashMap; }

support { 
HashMap<String, Integer> variables = new HashMap<String, Integer>(); 
HashMap<String, ARTGLLRDTHandle> melodies = new HashMap<String, ARTGLLRDTHandle>(); 
MiniMusicPlayer mp = new MiniMusicPlayer();
}

(*
whitespace &WHITESPACE
whitespace &COMMENT_NEST_ART 
whitespace &COMMENT_LINE_C 
*)

statements ::= statement | statement statements  

statement ::= ID '=' e0 ';' { variables.put(ID1.v, e01.v); } |     (* assignment *)

              'if' e0 'then' statement< elseOpt<                   (* if statement *)
              { if (e01.v != 0) 
                  artEvaluate(statement.statement1, statement1); 
                else
                  artEvaluate(statement.elseOpt1, elseOpt1);  
              } |
              
              'while' e0< 'do' statement<                          (* while statement *)
              { artEvaluate(statement.e01, e01); 
                while (e01.v != 0) { 
                  artEvaluate(statement.statement1, statement1); 
                  artEvaluate(statement.e01, e01); 
                } 
              } | 

              'print' '(' printElements ')' ';' |                   (* print statement *)

              'melody' ID statement< { melodies.put(ID1.v, statement.statement1); } |
              'play' ID ';' 
                { if (!melodies.containsKey(ID1.v))
                    artText.println(ARTTextLevel.WARNING, "ignoring request to play undefined melody: " + ID1.v);
                  else
                    artEvaluate(melodies.get(ID1.v), null); 
                } |

              '{' statements '}' |                                  (* compound statement *)

              bpm | defaultOctave | note | chord |  rest

elseOpt ::= 'else' statement | #     

bpm ::= 'bpm' INTEGER { mp.setBpm(INTEGER1.v); }

beatRatio ::= 'beatRatio' REAL { mp.setBeatRatio(REAL1.v); }

defaultOctave ::= 'defaultOctave' INTEGER 
 { if (INTEGER1.v < 0 || INTEGER1.v > 10) 
     artText.println(ARTTextLevel.WARNING, "ignoring illegal MIDI octave number " + INTEGER1.v);
    else
      mp.setDefaultOctave(INTEGER1.v); 
 }

note ::= simpleNote chordMode { mp.playChord(simpleNote1.v.trim(), chordMode1.v ); } | 
         simpleNote shifters chordMode { mp.playChord(simpleNote1.v.trim(), mp.getDefaultOctave() + shifters1.v, chordMode1.v); } | 
         simpleNote INTEGER chordMode { mp.playChord(simpleNote1.v.trim(), INTEGER1.v, chordMode1.v); }

chordMode <v:Chord> ::= # { chordMode.v = Chord.NONE; } | 
                           'm' { chordMode.v = Chord.MINOR; } | 'm7' { chordMode.v = Chord.MINOR7; } | 
                           'M' { chordMode.v = Chord.MAJOR; } | 'M7' { chordMode.v = Chord.MAJOR7; }

simpleNote<leftExtent:int rightExtent:int v:String> ::= 
  simpleNoteLexeme { simpleNote.v = artLexeme(simpleNote.leftExtent, simpleNote.rightExtent).trim(); }

simpleNoteLexeme ::= 'Ab' | 'A' | 'A#' | 'Bb' | 'B' | 'C' | 'C#' | 'Db' | 'D' | 'D#' | 'Eb' | 'E' | 'F' | 'F#' | 'Gb' | 'G' | 'G#'

shifters<v:int> ::= '+' {shifters.v = 1;} | '-' {shifters.v = -1;} | 
                    '+' shifters {shifters.v = shifters1.v + 1; } | 
                    '-' shifters {shifters.v = shifters1.v - 1; }
     
chord ::= '[' notes ']'

notes ::= note | note notes

rest ::= '.' { mp.rest(1); } | '..' { mp.rest(2); } | '...' { mp.rest(3); } | '....' { mp.rest(4); } 

printElements ::= STRING_DQ { artText.printf("%s", STRING_DQ1.v); } | 
                  STRING_DQ { artText.printf("%s", STRING_DQ1.v); } ',' printElements | 
                  e0 { artText.printf("%d", e01.v); } | e0 { artText.printf("%d", e01.v); } ',' printElements  

e0 <v:int> ::= e1 { e0.v = e11.v; } | 
               e1 '>'  e1 { e0.v = e11.v >  e12.v ? 1 : 0; } |       (* Greater than *)
               e1 '<'  e1 { e0.v = e11.v <  e12.v ? 1 : 0; } |       (* Less than *)
               e1 '>=' e1 { e0.v = e11.v >= e12.v ? 1 : 0; } |       (* Greater than or equals*)
               e1 '<=' e1 { e0.v = e11.v <= e12.v ? 1 : 0; } |       (* Less than or equals *)
               e1 '==' e1 { e0.v = e11.v == e12.v ? 1 : 0; } |       (* Equal to *)
               e1 '!=' e1 { e0.v = e11.v != e12.v ? 1 : 0; }         (* Not equal to *)

e1 <v:int>  ::= e2 { e1.v = e21.v; } | 
                e1 '+' e2 { e1.v = e11.v + e21.v; } |                (* Add *)
                e1 '-' e2 { e1.v = e11.v - e21.v; }                  (* Subtract *)

e2  <v:int> ::= e3 { e2.v= e31.v; } | 
                e2 '*' e3 { e2.v = e21.v * e31.v; } |                (* Multiply *)
                e2 '/' e3 { e2.v = e21.v / e31.v; } |                (* Divide *)
                e2 '%' e3 { e2.v = e21.v % e31.v; }                  (* Mod *)

e3  <v:int> ::= e4 {e3.v = e41.v; } | 
                '+' e3 {e3.v = e31.v; } |                            (* Posite *)
                '-' e3 {e3.v = -e31.v; }                             (* Negate *)

e4  <v:int> ::= e5 { e4.v = e51.v; } | 
                e5 '**' e4 {e4.v = (int) Math.pow(e51.v, e41.v); }   (* exponentiate *)

e5  <v:int> ::= INTEGER {e5.v = INTEGER1.v; } |                      (* Integer literal *)
                ID { e5.v = variables.get(ID1.v); } |                (* Variable access *)
                '(' e1 { e5.v = e11.v; } ')'                         (* Parenthesised expression *)
       
ID <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); }  

INTEGER <leftExtent:int rightExtent:int lexeme:String v:int> ::= 
  &INTEGER {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); }  

REAL <leftExtent:int rightExtent:int lexeme:String v:double> ::= 
  &REAL {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsInteger(REAL.leftExtent, REAL.rightExtent); }  

STRING_DQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_DQ {STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); }  
