statement ::= seq^^ | assign^^ | compassign^^ | if^^ | while^^ | for^^ | println^^ | init^^ | paint^^ | translate^^ | rotate^^ | scale^^

seq ::= statement statement
assign ::= ID '='^ relExpr ';'^
compassign ::= ID '+='^ relExpr ';'^
if ::= 
    'if'^ '('^ relExpr ')'^ '{'^ statement '}'^ 'else'^ '{'^ statement '}'^
  | 'if'^ '('^ relExpr ')'^ '{'^ statement '}'^
while ::= 'while'^ '('^ relExpr ')'^ '{'^ statement '}'^
for ::= 'for'^ '('^ statement relExpr ';'^ statement ')'^ '{'^ statement '}'^

println ::= 'println'^ '('^ printlnElem^ ')'^ ';'^
printlnElem ::= relExpr | relExpr ','^ printlnElem
init ::= 'init'^ '('^ INTEGER ','^ INTEGER  ')'^ ';'^
paint ::= 'paint'^ '('^ ')'^ ';'^
translate ::= deref '.translate'^ '('^ REAL ','^ REAL ','^ REAL ')'^ ';'^
rotate ::= deref '.rotate'^ '('^ REAL ','^ REAL ','^ REAL ')'^ ';'^
scale ::= deref '.scale'^ '('^ REAL ','^ REAL ','^ REAL ')'^ ';'^

relExpr ::= subExpr^^ | eq^^ | ne^^ | gt^^ | ge^^ | lt^^ | le^^ | and^^ | or^^ | not^^ | xor^^ | '('^ relExpr^^ ')'^
eq ::= relExpr '=='^ subExpr
ne ::= relExpr '!='^ subExpr
gt ::= relExpr '>'^ subExpr
ge ::= relExpr '>='^ subExpr
lt ::= relExpr '<'^ subExpr
le ::= relExpr '<='^ subExpr
and ::= relExpr '&&'^ relExpr
or ::= relExpr '||'^ relExpr
not ::= '!'^ relExpr
xor ::= relExpr '^'^ relExpr

subExpr ::= operand^^ | sub^^ | add^^ | mul^^ | div^^ | mod^^ | neg^^ | exp^^ | '('^ subExpr^^ ')'^
sub ::= subExpr '-'^ operand
add ::= subExpr '+'^ operand
mul ::= subExpr '*'^ operand
div ::= subExpr '/'^ operand
mod ::= subExpr '%'^ operand
neg ::= '-'^ operand
exp ::= subExpr '**'^ operand

operand ::= deref^^ | INTEGER^^ | REAL^^ | STRING_DQ^^ | '('^ subExpr^^ ')'^ | box^^ | cube^^ | sphere^^ | cylinder^^ | cone^^ | torus^^ | tetrahedron^^ | pyramid^^
deref ::= ID

box ::= 'BOX'^ '('^ REAL ','^ REAL ','^ REAL ')'^
cube ::= 'CUBE'^ '('^ REAL ')'^
sphere ::= 'SPHERE'^ '('^ REAL ')'^
cylinder ::= 'CYLINDER'^ '('^ REAL ','^ REAL ')'^
cone ::= 'CONE'^ '('^ REAL ','^ REAL ')'^
torus ::= 'TORUS'^ '('^ REAL ','^ REAL ')'^
tetrahedron ::= 'TETRAHEDRON'^ '('^ REAL ')'^
pyramid ::= 'PYRAMID'^ '('^ REAL ','^ REAL ')'^

(* lexical items below this line *)
ID <leftExtent:int rightExtent:int lexeme:String v:ARTValueString> ::=
  &ID^^ {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent);
  ID.v = new ARTValueString(artLexemeAsID(ID.leftExtent, ID.rightExtent)); }

INTEGER <leftExtent:int rightExtent:int lexeme:String v:ARTValueInteger32> ::=
  &INTEGER^^ { INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent);
  INTEGER.v = new ARTValueInteger32(artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent)); }

REAL <leftExtent:int rightExtent:int lexeme:String v:double> ::=
&REAL^^ {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent);
REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); }

STRING_DQ <leftExtent:int rightExtent:int lexeme:String v:String> ::=
&STRING_DQ^^ {STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent);
STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); }


