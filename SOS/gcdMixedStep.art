-sequenceDone 
---
seq(__done, _C), _sig -> _C, _sig

-sequence 
_C1, _sig -> _C1P, _sigP
---
seq(_C1, _C2), _sig -> seq(_C1P, _C2), _sigP

-ifTrue 
---
if(True, _C1, _C2),_sig -> _C1, _sig

-ifFalse 
---
if(False, _C1, _C2),_sig -> _C2,_sig

-ifResolve
_E, _sig => _EP, _sigP
---
if(_E, _C1, _C2), _sig -> if(_EP, _C1, _C2), _sigP

-while
if(_E, seq(_C, while(_E,_C)), __done), _sig -> _CP, _sigP 
---
while(_E, _C), _sig -> _CP, _sigP

-assign
_n |> __int32(_) 
---
assign(_X, _n), _sig -> __done, __put(_sig, _X, _n)

-assignResolve
_E, _sig => _n, _sigP 
---
assign(_X,_E), _sig -> assign(_X, _n), _sigP

-gt
_E1, _sig => _n1, _sig1  _E2, _sig1 => _n2, _sig2 
---
gt(_E1, _E2), _sig => __gt(_n1, _n2), _sig2

-ne
_E1, _sig => _n1, _sig1  _E2, _sig1 => _n2, _sig2 
---
ne(_E1, _E2), _sig => __ne(_n1, _n2), _sig2

-sub
_E1, _sig => _n1, _sig1  _E2, _sig1 => _n2, _sig2
---
sub(_E1, _E2), _sig =>  __sub(_n1, _n2), _sig2

-variable
---
deref(_R), _sig => __get(_sig, _R), _sig

!try seq(seq(seq(assign(a, 6), assign(b, 9)), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a)))))), assign(gcd, deref(a))), __map
