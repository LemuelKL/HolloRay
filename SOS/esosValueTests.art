(* Value system tests using the term rewriter *)

(* One rule for each Value operation *)
--- eq(_x, _y) -> __eq(_x, _y)
--- ne(_x, _y) -> __ne(_x, _y)
--- gt(_x, _y) -> __gt(_x, _y)
--- lt(_x, _y) -> __lt(_x, _y)
--- ge(_x, _y   ) -> __ge(_x, _y)
--- le(_x, _y   ) -> __le(_x, _y)
--- compare(_x, _y) -> __compare(_x, _y)

--- not(_x) -> __not(_x)
--- and(_x, _y) -> __and(_x, _y)
--- or(_x, _y) -> __or(_x, _y)
--- xor(_x, _y) -> __xor(_x, _y)
--- cnd(_x, _y) -> __cnd(_x, _y)

--- lsh(_x, _y) -> __lsh(_x, _y)
--- rsh(_x, _y) -> __rsh(_x, _y)
--- ash(_x, _y) -> __ash(_x, _y)
--- rol(_x, _y) -> __rol(_x, _y)
--- ror(_x, _y) -> __ror(_x, _y)

--- neg(_x) -> __neg(_x)
--- add(_x, _y) -> __add(_x, _y)
--- sub(_x, _y) -> __sub(_x, _y)
--- mul(_x, _y) -> __mul(_x, _y)
--- div(_x, _y) -> __div(_x, _y)
--- mod(_x, _y) -> __mod(_x, _y)
--- exp(_x, _y) -> __exp(_x, _y)

--- size(_x) -> __size(_x)
--- cat(_x, _y)-> __cat(_x, _y)
--- slice(_x)-> __slice(_x)   // Monadic slice on lists gets tail
--- slice(_x, _l, _r)-> __slice(_x, _l, _r)
--- get(_x)-> __get(_x)   // Monadic get on lists gets head
--- get(_x, _y)-> __get(_x, _y)
--- put(_x, _y)-> __put(_x, _y)
--- put(_x, _y, _z)-> __put(_x, _y, _z)

--- contains(_x, _y) -> __contains(_x, _y)
--- remove(_x, _y) -> __remove(_x, _y)
--- extract(_x) -> __extract(_x)

--- union(_x, _y) -> __union(_x, _y)
--- intersection(_x, _y) -> __intersection(_x, _y)
--- difference(_x, _y) -> __difference(_x, _y)
--- cast(_x, _y) -> __cast(_x, _y)

--- termArity(_x) -> __termArity(_x)
--- termRoot(_x) -> __termRoot(_x)
--- termMake(_t, _r, _l, _h) -> __termMake(_t, _r, _l, _h)
--- termMatch(_x, _y) -> __termMatch(_x, _y)
--- user(_x, _y, _z) -> __user(_x, _y, _z)

(* Tests for each type/opertaion combination *)

(* __bottom *)
!try eq(__bottom, __bottom), True
!try ne(__bottom, __bottom) = False

(* __done *)
!try eq(__done, __done) = True
!try ne(__done, __done) = False

(* __empty *)
!try eq(__empty, __empty) = True
!try ne(__empty, __empty) = False

(* __quote *)
!try eq(__quote(a), __quote(a)) = True
!try ne(__quote(a), __quote(a)) = False

(* __proc *)
!try eq(__proc(a), __proc(a)) = True
!try ne(__proc(a), __proc(a)) = False

(* __procV3 *)
!try eq(__procV3(a), __procV3(a)) = True
!try ne(__procV3(a), __procV3(a)) = False

(* __input *)
!try eq(__input("test"), __input("test")) = True
!try eq(__input("test"), __input("test1")) = False
!try ne(__input("test"), __input("test")) = False
!try ne(__input("test"), __input("test1")) = True

(* __ouput *)
!try eq(__output("test"), __output("test")) = True
!try eq(__output("test"), __output("test1")) = False
!try ne(__output("test"), __output("test")) = False
!try ne(__output("test"), __output("test1")) = True

(* __binding *)
!try eq(__binding(a, 3), __binding(a, 3)) = True
!try ne(__binding(a, 3), __binding(a, 3)) = False

(* __adtProd *)
!try eq(__adtProduct(a, 3), __adtProduct(a, 3)) = True
!try ne(__adtProduct(a, 3), __adtProduct(a, 3)) = False

(* __adtSum *)
!try eq(__adtSum(a, 3), __adtSum(a, 3)) = True
!try ne(__adtSum(a, 3), __adtSum(a, 3)) = False

(* __bool *)
!try eq(True, True) = True
!try ne(True, True) = False

!try eq(True, False) = False
!try ne(False, True) = True

!try not(True) = False
!try not(False) = True
!try and(True, False) = False
!try and(True, True) = True
!try or(True, False) = True
!try or(False, False) = False
!try xor(True, True) = False
!try xor(False, True) = True

(* __char *)
!try eq(`a, `a) = True
!try ne(`a, `a) = False

!try eq(`a, `c) = False
!try eq(`c, `c) = True

!try ne(`a, `c) = True
!try ne(`a, `a) = False

!try gt(`c, `b) = True
!try gt(`c, `c) = False

!try ge(`c, `b) = True
!try ge(`c, `c) = True

!try lt(`c, `b) = False
!try lt(`c, `c) = False

!try le(`c, `b) = False
!try le(`c, `c) = True

(* __intAP *)
!try eq(3, 2) = False
!try eq(3, 3) = True

!try ne(3, 2) = True
!try ne(3, 3) = False

!try gt(3, 2) = True
!try gt(3, 3) = False

!try ge(3, 2) = True
!try ge(3, 3) = True

!try lt(3, 2) = False
!try lt(3, 3) = False

!try le(3, 2) = False
!try le(3, 3) = True

!try not(15) = -16
!try and(7, 3) = 3
!try or(7, 8) = 15
!try xor(3, 2) = 1

!try lsh(15, 2) = 60
!try rsh(15, 2) = 3
!try ash(15, 2) = 3

!try rol(15, 2) = 60
!try ror(15, 2) = -2147483645

!try add(3, 2) = 5
!try sub(2, 3) = -1
!try mul(-3, 2) = -6
!try div(3, 2) = 1
!try mod(3, 2) = 1
!try exp(3, 2) = 9

(* __int32 *)
!try eq(3, 2) = False
!try eq(3, 3) = True

!try ne(3, 2) = True
!try ne(3, 3) = False

!try gt(3, 2) = True
!try gt(3, 3) = False

!try ge(3, 2) = True
!try ge(3, 3) = True

!try lt(3, 2) = False
!try lt(3, 3) = False

!try le(3, 2) = False
!try le(3, 3) = True

!try not(15) = -16
!try and(7, 3) = 3
!try or(7, 8) = 15
!try xor(3, 2) = 1

!try lsh(15, 2) = 60
!try rsh(15, 2) = 3
!try ash(15, 2) = 3

!try rol(15, 2) = 60
!try ror(15, 2) = -2147483645

!try add(3, 2) = 5
!try sub(2, 3) = -1
!try mul(-3, 2) = -6
!try div(3, 2) = 1
!try mod(3, 2) = 1
!try exp(3, 2) = 9

(* __realAP *)
!try eq(3.0, 2.0) = False
!try eq(3.0, 3.0) = True

!try ne(3.0, 2.0) = True
!try ne(3.0, 3.0) = False

!try gt(3.0, 2.0) = True
!try gt(3.0, 3.0) = False

!try ge(3.0, 2.0) = True
!try ge(3.0, 3.0) = True

!try lt(3.0, 2.0) = False
!try lt(3.0, 3.0) = False

!try le(3.0, 2.0) = False
!try le(3.0, 3.0) = True

!try neg(3.0) = -3.0
!try add(3.0, 2.0) = 5.0
!try sub(3.0, 2.0) = 1.0
!try mul(3.0, 2.0) = 6.0
!try div(3.0, 2.0) = 1.5
!try mod(3.0, 2.0) = 1.0
!try exp(3.0, 2.0) = 9.0

(* __real64 *)
!try eq(3.0, 2.0) = False
!try eq(3.0, 3.0) = True

!try ne(3.0, 2.0) = True
!try ne(3.0, 3.0) = False

!try gt(3.0, 2.0) = True
!try gt(3.0, 3.0) = False

!try ge(3.0, 2.0) = True
!try ge(3.0, 3.0) = True

!try lt(3.0, 2.0) = False
!try lt(3.0, 3.0) = False

!try le(3.0, 2.0) = False
!try le(3.0, 3.0) = True

!try neg(3.0) = -3.0
!try add(3.0, 2.0) = 5.0
!try sub(3.0, 2.0) = 1.0
!try mul(3.0, 2.0) = 6.0
!try div(3.0, 2.0) = 1.5
!try mod(3.0, 2.0) = 1.0
!try exp(3.0, 2.0) = 9.0

(* __string *)
!try compare("Adrian", "Johnstone") = -1
!try compare("Adrian", "Adrian") = 0
!try compare("ZAdrian", "Johnstone") = 1
!try compare("", "Johnstone") = -1
!try compare("", "") = 0
!try size("") = 0
!try size("Adrian") = 6
!try cat("World", "hello") = "Worldhello"
!try cat("hello", "World") = "helloWorld"
!try get("Adrian", 1) = `d
!try slice("0123456789", 2, 7) = "23456"
!try slice("0123456789", 2, 2) = ""
!try slice("0123456789", 2, 3) = "2"
!try slice("0123456789", 2, 4) = "23"

(* __array *)
!try size(__array(4, `a, "b", 3)) = 4
!try get(__array(4, `a, "b", 3), 2) = 3
!try put(__array(4, `a, "b", 3), 1, `z) = __array(4, `a, `z, 3, __empty)
!try slice(__array(4, `a, "b", 3), 1, 1) = __array(0)
!try slice(__array(4, `a, "b", 3), 1, 2) = __array(1, "b")
!try slice(__array(4, `a, "b", 3), 1, 3) = __array(2, "b", 3)

(* __list *)
!try size(__list(a, "b", 3)) = 3
!try cat(__list(`a, "b", 3), __list()) = __list(`a, "b", 3)
!try cat(__list(`a, "b", 3), __list(25.9, "z")) = __list(`a, "b", 3, 25.9, "z")
!try get(__list(`a, "b", 3, 25.9, "z")) = `a // monadic get returns the head of the list, or __empty of the list has no elements
!try slice(__list(`a, "b", 3, 25.9, "z")) = __list("b", 3, 25.9, "z") // monadic slice ets tail of list, or __empty if the list has zero or one element
!try get(__list()) = __empty
!try slice(__list(`a)) = __empty


(* __flexArray *)
!try size(__flexArray(`a, "b", 3)) = 3
!try cat(__flexArray(`a, "b", 3), __flexArray()) = __flexArray(`a, "b", 3)
!try cat(__flexArray(`a, "b", 3), __flexArray(25.9, "z")) = __flexArray(`a, "b", 3, 25.9, "z")

!try get(__flexArray(`a, "b", 3, 25.9, "z"), 1) = "b"
!try put(__flexArray(`a, "b", 3, 25.9, "z"), 2, "z") = __flexArray(`a, "b", "z", 25.9, "z")
!try slice(__flexArray(`a, "b", 3, 25.9, "z"), 1, 4) = __flexArray("b", 3, 25.9)

(* __set *)
!try size(__set(`a, "b", 3)) = 3
!try put(__set(`a, "b"), 3) = __set("b", `a, 3) 
!try contains(__set(`a, "b"), `a) = True 
!try contains(__set(`a, "b"), `z) = False 
!try remove(__set(`a, "b"), `a) = __set("b") 
!try extract(__set(`a, "b")) = "b" 
!try union(__set(`a, "b"), __set("b", 3)) = __set("b", `a, 3) 
!try intersection(__set(`a, "b"), __set("b", 3)) = __set("b") 
!try difference(__set(`a, "b"), __set("b", 3)) = __set(`a) 

(* __map *)
!try size(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z"))) = 3
!try put(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z")), 3, 7) = __map(__binding("b", 4), __binding(`a, 3), __binding(3, 7))
!try put(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z")), 10, 7) = __map(__binding("b", 4), __binding(`a, 3), __binding(3, "z"), __binding(10, 7))
!try contains(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z")), `a) = True 
!try contains(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z")), `z) = False 
!try remove(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z")), `a) = __map(__binding("b", 4), __binding(3, "z"))
!try extract(__map(__binding(`a, 3), __binding("b", 4), __binding(3, "z"))) = __binding("b", 4)
!try extract(__map()) = __empty

(* __mapChain *)
!try size(__mapChain(__empty, __binding(`a, 3), __binding("b", 4), __binding(3, "z"))) = 3
!try put(__mapChain(__empty, __binding(`a, 3), __binding("b", 4), __binding(3, "z")), 3, 7) = __mapChain(__empty, __binding("b", 4), __binding(`a, 3), __binding(3, 7))
!try put(__mapChain(__empty, __binding(`a, 3), __binding("b", 4), __binding(3, "z")), 10, 7) = __mapChain(__empty, __binding("b", 4), __binding(`a, 3), __binding(3, "z"), __binding(10, 7))
!try contains(__mapChain(__empty, __binding(`a, 3), __binding("b", 4), __binding(3, "z")), `a) = True 
!try contains(__mapChain(__empty, __binding(`a, 3), __binding("b", 4), __binding(3, "z")), `z) = False 
!try remove(__mapChain(__empty, __binding(a, 3), __binding("b", 4), __binding(3, "z")), a) = __mapChain(__empty, __binding("b", 4), __binding(3, "z"))
!try extract(__mapChain(__empty, __binding(a, 3), __binding("b", 4), __binding(3, "z"))) = __binding("b", 4)
!try extract(__mapChain(__empty)) = __empty
