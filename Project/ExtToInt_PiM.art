(* ART parser for the GCD+user language which generates abstract terms *)

statement ::= seq^^ | assign^^ | if^^ | while^^ | backend^^
 
seq ::= statement statement
assign ::= ID ':='^ subExpr ';'^
if ::= 'if'^ relExpr statement 'else'^ statement
while ::= 'while'^ relExpr statement 
backend ::= 'backend'^ '('^ subExpr ','^ subExpr ','^ subExpr ')'^

relExpr ::= subExpr^^ | gt^^ | ne^^
gt ::= relExpr '>'^ subExpr
ne ::= relExpr '!='^ subExpr

subExpr ::= operand^^ | sub^^
sub ::= subExpr '-'^ operand

operand ::= deref^^ | INTEGER^^ | '('^ subExpr^^ ')'^ 
deref ::= ID

(* lexical items below this line *)
ID <leftExtent:int rightExtent:int lexeme:String v:ARTValueString> ::= 
  &ID^^ {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); 
  ID.v = new ARTValueString(artLexemeAsID(ID.leftExtent, ID.rightExtent)); }  

INTEGER <leftExtent:int rightExtent:int lexeme:String v:ARTValueInteger32> ::= 
  &INTEGER^^ { INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); 
  INTEGER.v = new ARTValueInteger32(artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent)); }  

