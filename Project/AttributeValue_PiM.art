(* ART parser with Value attributes for the GCD language *)
support {
  ITerms iTerms = new ITermsLowLevelAPI();
  Value variables = new __map();
}

statements ::= statement { System.out.println("Variables at end of program: " + variables); }
| statement statements  

statement ::=
  ID ':=' subExpr ';' { variables.__put(ID1.v, subExpr1.v); }
| 'if' relExpr statement< 'else' statement<
  { if (((__bool) relExpr1.v).value()) 
      artEvaluate(statement.statement1, statement1); 
    else
      artEvaluate(statement.statement2, statement2);  
   }

| 'while' relExpr< statement< 
  { artEvaluate(statement.relExpr1, relExpr1); 
    while (((__bool) relExpr1.v).value()) { 
      artEvaluate(statement.statement1, statement1); 
      artEvaluate(statement.relExpr1, relExpr1); 
    } 
  }

| 'backend' '(' subExpr ',' subExpr ',' subExpr ')'
  { iTerms.valueUserPlugin.user(subExpr1.v, subExpr2.v, subExpr3.v); }

relExpr<v:Value> ::=
  subExpr { relExpr.v = subExpr1.v; }
| relExpr '>' subExpr { relExpr.v = relExpr1.v.__gt(subExpr1.v); }
| relExpr '!=' subExpr { relExpr.v = relExpr1.v.__ne(subExpr1.v); }

subExpr<v:Value> ::=
  operand { subExpr.v = operand1.v; }
| subExpr '-' operand { subExpr.v = subExpr1.v.__sub(operand1.v); }

operand<v:Value> ::=
  ID {operand.v = variables.__get(ID1.v); }
| INTEGER {operand.v = INTEGER1.v; }
| '(' subExpr ')' {operand.v = subExpr1.v; }

(* lexical items below this line *)
ID <leftExtent:int rightExtent:int lexeme:String v:__string> ::= 
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = new __string(artLexemeAsID(ID.leftExtent, ID.rightExtent)); }  

INTEGER <leftExtent:int rightExtent:int lexeme:String v:__int32> ::= 
  &INTEGER {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = new __int32(artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent), 0); }  

